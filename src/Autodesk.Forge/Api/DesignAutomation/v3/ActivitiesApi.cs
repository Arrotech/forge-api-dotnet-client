/* 
 * Forge Design Automation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model.DesignAutomation.v3;

namespace Autodesk.Forge.DesignAutomation.v3
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IActivitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new alias for this activity.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic ActivitiesCreateAlias (string id, Alias alias = null, int? saveCondition = null);

        /// <summary>
        /// Creates a new alias for this activity.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> ActivitiesCreateAliasWithHttpInfo (string id, Alias alias = null, int? saveCondition = null);
        /// <summary>
        /// Creates a new activity.
        /// </summary>
        /// <remarks>
        /// Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Activity</returns>
        /*Activity*/dynamic ActivitiesCreateItem (Activity item = null);

        /// <summary>
        /// Creates a new activity.
        /// </summary>
        /// <remarks>
        /// Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse</*Activity*/dynamic> ActivitiesCreateItemWithHttpInfo (Activity item = null);
        /// <summary>
        /// Creates a new version of the activity.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Activity</returns>
        /*Activity*/dynamic ActivitiesCreateItemVersion (string id, Activity item = null);

        /// <summary>
        /// Creates a new version of the activity.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse</*Activity*/dynamic> ActivitiesCreateItemVersionWithHttpInfo (string id, Activity item = null);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns></returns>
        void ActivitiesDeleteAlias (string id, string aliasId);

        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivitiesDeleteAliasWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Deletes the specified activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified activity, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        void ActivitiesDeleteItem (string id);

        /// <summary>
        /// Deletes the specified activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified activity, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivitiesDeleteItemWithHttpInfo (string id);
        /// <summary>
        /// Deletes the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        void ActivitiesDeleteVersion (int? version, string id);

        /// <summary>
        /// Deletes the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivitiesDeleteVersionWithHttpInfo (int? version, string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic ActivitiesGetAlias (string id, string aliasId);

        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> ActivitiesGetAliasWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageAlias</returns>
        /*PageAlias*/dynamic ActivitiesGetAliases (string id, string page = null);

        /// <summary>
        /// Lists all aliases for the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        ApiResponse</*PageAlias*/dynamic> ActivitiesGetAliasesWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Gets the details of the specified activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Activity</returns>
        /*Activity*/dynamic ActivitiesGetItem (string id);

        /// <summary>
        /// Gets the details of the specified activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>ApiResponse of Activity</returns>
        ApiResponse</*Activity*/dynamic> ActivitiesGetItemWithHttpInfo (string id);
        /// <summary>
        /// Gets the details of the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        void ActivitiesGetItemVersion (int? version, string id);

        /// <summary>
        /// Gets the details of the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ActivitiesGetItemVersionWithHttpInfo (int? version, string id);
        /// <summary>
        /// Lists all available activities.
        /// </summary>
        /// <remarks>
        /// Lists all available activities, including activities shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>QueryResultPageString</returns>
        /*QueryResultPageString*/dynamic ActivitiesGetItems (string page = null);

        /// <summary>
        /// Lists all available activities.
        /// </summary>
        /// <remarks>
        /// Lists all available activities, including activities shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of QueryResultPageString</returns>
        ApiResponse</*QueryResultPageString*/dynamic> ActivitiesGetItemsWithHttpInfo (string page = null);
        /// <summary>
        /// Lists all versions of the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageInt32</returns>
        /*PageInt32*/dynamic ActivitiesGetVersions (string id, string page = null);

        /// <summary>
        /// Lists all versions of the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageInt32</returns>
        ApiResponse</*PageInt32*/dynamic> ActivitiesGetVersionsWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic ActivitiesModifyAlias (string id, string aliasId, Alias alias = null);

        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> ActivitiesModifyAliasWithHttpInfo (string id, string aliasId, Alias alias = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new alias for this activity.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesCreateAliasAsync (string id, Alias alias = null, int? saveCondition = null);

        /// <summary>
        /// Creates a new alias for this activity.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesCreateAliasAsyncWithHttpInfo (string id, Alias alias = null, int? saveCondition = null);
        /// <summary>
        /// Creates a new activity.
        /// </summary>
        /// <remarks>
        /// Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesCreateItemAsync (Activity item = null);

        /// <summary>
        /// Creates a new activity.
        /// </summary>
        /// <remarks>
        /// Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesCreateItemAsyncWithHttpInfo (Activity item = null);
        /// <summary>
        /// Creates a new version of the activity.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesCreateItemVersionAsync (string id, Activity item = null);

        /// <summary>
        /// Creates a new version of the activity.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesCreateItemVersionAsyncWithHttpInfo (string id, Activity item = null);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivitiesDeleteAliasAsync (string id, string aliasId);

        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteAliasAsyncWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Deletes the specified activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified activity, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivitiesDeleteItemAsync (string id);

        /// <summary>
        /// Deletes the specified activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified activity, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivitiesDeleteVersionAsync (int? version, string id);

        /// <summary>
        /// Deletes the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteVersionAsyncWithHttpInfo (int? version, string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesGetAliasAsync (string id, string aliasId);

        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesGetAliasAsyncWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task</*PageAlias*/dynamic> ActivitiesGetAliasesAsync (string id, string page = null);

        /// <summary>
        /// Lists all aliases for the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PageAlias*/dynamic>> ActivitiesGetAliasesAsyncWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Gets the details of the specified activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Task of Activity</returns>
        System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesGetItemAsync (string id);

        /// <summary>
        /// Gets the details of the specified activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesGetItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the details of the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ActivitiesGetItemVersionAsync (int? version, string id);

        /// <summary>
        /// Gets the details of the specified version of the activity.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesGetItemVersionAsyncWithHttpInfo (int? version, string id);
        /// <summary>
        /// Lists all available activities.
        /// </summary>
        /// <remarks>
        /// Lists all available activities, including activities shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        System.Threading.Tasks.Task</*QueryResultPageString*/dynamic> ActivitiesGetItemsAsync (string page = null);

        /// <summary>
        /// Lists all available activities.
        /// </summary>
        /// <remarks>
        /// Lists all available activities, including activities shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultPageString)</returns>
        System.Threading.Tasks.Task<ApiResponse</*QueryResultPageString*/dynamic>> ActivitiesGetItemsAsyncWithHttpInfo (string page = null);
        /// <summary>
        /// Lists all versions of the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        System.Threading.Tasks.Task</*PageInt32*/dynamic> ActivitiesGetVersionsAsync (string id, string page = null);

        /// <summary>
        /// Lists all versions of the specified activity.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified activity.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PageInt32*/dynamic>> ActivitiesGetVersionsAsyncWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesModifyAliasAsync (string id, string aliasId, Alias alias = null);

        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesModifyAliasAsyncWithHttpInfo (string id, string aliasId, Alias alias = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class ActivitiesApi : IActivitiesApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivitiesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ActivitiesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new alias for this activity. Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic ActivitiesCreateAlias (string id, Alias alias = null, int? saveCondition = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = ActivitiesCreateAliasWithHttpInfo(id, alias, saveCondition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new alias for this activity. Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > ActivitiesCreateAliasWithHttpInfo (string id, Alias alias = null, int? saveCondition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesCreateAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveCondition != null) localVarQueryParams.Add("saveCondition", Configuration.ApiClient.ParameterToString(saveCondition)); // query parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Creates a new alias for this activity. Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesCreateAliasAsync (string id, Alias alias = null, int? saveCondition = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await ActivitiesCreateAliasAsyncWithHttpInfo(id, alias, saveCondition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new alias for this activity. Creates a new alias for this activity. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="alias">{ id : {anyname}, version : {version number}, receiver : [{id of other Forge app},...] }. (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesCreateAliasAsyncWithHttpInfo (string id, Alias alias = null, int? saveCondition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesCreateAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveCondition != null) localVarQueryParams.Add("saveCondition", Configuration.ApiClient.ParameterToString(saveCondition)); // query parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Creates a new activity. Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Activity</returns>
        public /*Activity*/dynamic ActivitiesCreateItem (Activity item = null)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = ActivitiesCreateItemWithHttpInfo(item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new activity. Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< /*Activity*/dynamic > ActivitiesCreateItemWithHttpInfo (Activity item = null)
        {

            var localVarPath = "/da/us-east/v3/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Creates a new activity. Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesCreateItemAsync (Activity item = null)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = await ActivitiesCreateItemAsyncWithHttpInfo(item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new activity. Creates a new activity. Limits: (varies by engine) 1. Number of activities that can be created.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesCreateItemAsyncWithHttpInfo (Activity item = null)
        {

            var localVarPath = "/da/us-east/v3/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Creates a new version of the activity. Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Activity</returns>
        public /*Activity*/dynamic ActivitiesCreateItemVersion (string id, Activity item = null)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = ActivitiesCreateItemVersionWithHttpInfo(id, item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new version of the activity. Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< /*Activity*/dynamic > ActivitiesCreateItemVersionWithHttpInfo (string id, Activity item = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesCreateItemVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Creates a new version of the activity. Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesCreateItemVersionAsync (string id, Activity item = null)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = await ActivitiesCreateItemVersionAsyncWithHttpInfo(id, item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new version of the activity. Creates a new version of the activity.              Limit:              1. Number of versions (LimitVersions).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesCreateItemVersionAsyncWithHttpInfo (string id, Activity item = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesCreateItemVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesCreateItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns></returns>
        public void ActivitiesDeleteAlias (string id, string aliasId)
        {
             ActivitiesDeleteAliasWithHttpInfo(id, aliasId);
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivitiesDeleteAliasWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesDeleteAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivitiesDeleteAliasAsync (string id, string aliasId)
        {
             await ActivitiesDeleteAliasAsyncWithHttpInfo(id, aliasId);

        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteAliasAsyncWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesDeleteAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified activity. Deletes the specified activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        public void ActivitiesDeleteItem (string id)
        {
             ActivitiesDeleteItemWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the specified activity. Deletes the specified activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivitiesDeleteItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteItem");

            var localVarPath = "/da/us-east/v3/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified activity. Deletes the specified activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivitiesDeleteItemAsync (string id)
        {
             await ActivitiesDeleteItemAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the specified activity. Deletes the specified activity, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteItem");

            var localVarPath = "/da/us-east/v3/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified version of the activity. Deletes the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        public void ActivitiesDeleteVersion (int? version, string id)
        {
             ActivitiesDeleteVersionWithHttpInfo(version, id);
        }

        /// <summary>
        /// Deletes the specified version of the activity. Deletes the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivitiesDeleteVersionWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ActivitiesApi->ActivitiesDeleteVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified version of the activity. Deletes the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivitiesDeleteVersionAsync (int? version, string id)
        {
             await ActivitiesDeleteVersionAsyncWithHttpInfo(version, id);

        }

        /// <summary>
        /// Deletes the specified version of the activity. Deletes the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesDeleteVersionAsyncWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ActivitiesApi->ActivitiesDeleteVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesDeleteVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesDeleteVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic ActivitiesGetAlias (string id, string aliasId)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = ActivitiesGetAliasWithHttpInfo(id, aliasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > ActivitiesGetAliasWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesGetAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesGetAliasAsync (string id, string aliasId)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await ActivitiesGetAliasAsyncWithHttpInfo(id, aliasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesGetAliasAsyncWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesGetAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Lists all aliases for the specified activity. Lists all aliases for the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageAlias</returns>
        public /*PageAlias*/dynamic ActivitiesGetAliases (string id, string page = null)
        {
             ApiResponse</*PageAlias*/dynamic> localVarResponse = ActivitiesGetAliasesWithHttpInfo(id, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all aliases for the specified activity. Lists all aliases for the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        public ApiResponse< /*PageAlias*/dynamic > ActivitiesGetAliasesWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetAliases");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageAlias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageAlias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias), true));
            
        }

        /// <summary>
        /// Lists all aliases for the specified activity. Lists all aliases for the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task</*PageAlias*/dynamic> ActivitiesGetAliasesAsync (string id, string page = null)
        {
             ApiResponse</*PageAlias*/dynamic> localVarResponse = await ActivitiesGetAliasesAsyncWithHttpInfo(id, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all aliases for the specified activity. Lists all aliases for the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PageAlias*/dynamic>> ActivitiesGetAliasesAsyncWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetAliases");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageAlias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageAlias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias), true));
            
        }

        /// <summary>
        /// Gets the details of the specified activity. Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Activity</returns>
        public /*Activity*/dynamic ActivitiesGetItem (string id)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = ActivitiesGetItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of the specified activity. Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>ApiResponse of Activity</returns>
        public ApiResponse< /*Activity*/dynamic > ActivitiesGetItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetItem");

            var localVarPath = "/da/us-east/v3/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Gets the details of the specified activity. Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Task of Activity</returns>
        public async System.Threading.Tasks.Task</*Activity*/dynamic> ActivitiesGetItemAsync (string id)
        {
             ApiResponse</*Activity*/dynamic> localVarResponse = await ActivitiesGetItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of the specified activity. Gets the details of the specified activity. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the activity (owner.name+label).</param>
        /// <returns>Task of ApiResponse (Activity)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Activity*/dynamic>> ActivitiesGetItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetItem");

            var localVarPath = "/da/us-east/v3/activities/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Activity*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Activity)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Activity), true));
            
        }

        /// <summary>
        /// Gets the details of the specified version of the activity. Gets the details of the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns></returns>
        public void ActivitiesGetItemVersion (int? version, string id)
        {
             ActivitiesGetItemVersionWithHttpInfo(version, id);
        }

        /// <summary>
        /// Gets the details of the specified version of the activity. Gets the details of the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ActivitiesGetItemVersionWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ActivitiesApi->ActivitiesGetItemVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetItemVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the details of the specified version of the activity. Gets the details of the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ActivitiesGetItemVersionAsync (int? version, string id)
        {
             await ActivitiesGetItemVersionAsyncWithHttpInfo(version, id);

        }

        /// <summary>
        /// Gets the details of the specified version of the activity. Gets the details of the specified version of the activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (integer).</param>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ActivitiesGetItemVersionAsyncWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling ActivitiesApi->ActivitiesGetItemVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetItemVersion");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Lists all available activities. Lists all available activities, including activities shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>QueryResultPageString</returns>
        public /*QueryResultPageString*/dynamic ActivitiesGetItems (string page = null)
        {
             ApiResponse</*QueryResultPageString*/dynamic> localVarResponse = ActivitiesGetItemsWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all available activities. Lists all available activities, including activities shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of QueryResultPageString</returns>
        public ApiResponse< /*QueryResultPageString*/dynamic > ActivitiesGetItemsWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*QueryResultPageString*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(QueryResultPageString)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageString), true));
            
        }

        /// <summary>
        /// Lists all available activities. Lists all available activities, including activities shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        public async System.Threading.Tasks.Task</*QueryResultPageString*/dynamic> ActivitiesGetItemsAsync (string page = null)
        {
             ApiResponse</*QueryResultPageString*/dynamic> localVarResponse = await ActivitiesGetItemsAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all available activities. Lists all available activities, including activities shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultPageString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*QueryResultPageString*/dynamic>> ActivitiesGetItemsAsyncWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/activities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*QueryResultPageString*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(QueryResultPageString)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageString), true));
            
        }

        /// <summary>
        /// Lists all versions of the specified activity. Lists all versions of the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageInt32</returns>
        public /*PageInt32*/dynamic ActivitiesGetVersions (string id, string page = null)
        {
             ApiResponse</*PageInt32*/dynamic> localVarResponse = ActivitiesGetVersionsWithHttpInfo(id, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all versions of the specified activity. Lists all versions of the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageInt32</returns>
        public ApiResponse< /*PageInt32*/dynamic > ActivitiesGetVersionsWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetVersions");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageInt32*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageInt32)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInt32), true));
            
        }

        /// <summary>
        /// Lists all versions of the specified activity. Lists all versions of the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        public async System.Threading.Tasks.Task</*PageInt32*/dynamic> ActivitiesGetVersionsAsync (string id, string page = null)
        {
             ApiResponse</*PageInt32*/dynamic> localVarResponse = await ActivitiesGetVersionsAsyncWithHttpInfo(id, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all versions of the specified activity. Lists all versions of the specified activity.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PageInt32*/dynamic>> ActivitiesGetVersionsAsyncWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesGetVersions");

            var localVarPath = "/da/us-east/v3/activities/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesGetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageInt32*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageInt32)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInt32), true));
            
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic ActivitiesModifyAlias (string id, string aliasId, Alias alias = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = ActivitiesModifyAliasWithHttpInfo(id, aliasId, alias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > ActivitiesModifyAliasWithHttpInfo (string id, string aliasId, Alias alias = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesModifyAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesModifyAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesModifyAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> ActivitiesModifyAliasAsync (string id, string aliasId, Alias alias = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await ActivitiesModifyAliasAsyncWithHttpInfo(id, aliasId, alias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> ActivitiesModifyAliasAsyncWithHttpInfo (string id, string aliasId, Alias alias = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ActivitiesApi->ActivitiesModifyAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling ActivitiesApi->ActivitiesModifyAlias");

            var localVarPath = "/da/us-east/v3/activities/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivitiesModifyAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

    }
}
