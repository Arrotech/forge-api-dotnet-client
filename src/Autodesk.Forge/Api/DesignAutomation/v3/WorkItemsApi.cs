/* 
 * Forge Design Automation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model.DesignAutomation.v3;

namespace Autodesk.Forge.DesignAutomation.v3
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWorkItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new workitem and queues it for processing.
        /// </summary>
        /// <remarks>
        /// Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>WorkItemStatus</returns>
        /*WorkItemStatus*/dynamic WorkItemsCreateWorkItems (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null);

        /// <summary>
        /// Creates a new workitem and queues it for processing.
        /// </summary>
        /// <remarks>
        /// Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>ApiResponse of WorkItemStatus</returns>
        ApiResponse</*WorkItemStatus*/dynamic> WorkItemsCreateWorkItemsWithHttpInfo (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null);
        /// <summary>
        /// Cancels a specific workitem.
        /// </summary>
        /// <remarks>
        /// Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void WorkItemsDeleteWorkitems (string id);

        /// <summary>
        /// Cancels a specific workitem.
        /// </summary>
        /// <remarks>
        /// Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WorkItemsDeleteWorkitemsWithHttpInfo (string id);
        /// <summary>
        /// Gets the status of a specific workitem.
        /// </summary>
        /// <remarks>
        /// Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WorkItemStatus</returns>
        /*WorkItemStatus*/dynamic WorkItemsGetWorkitemsStatus (string id);

        /// <summary>
        /// Gets the status of a specific workitem.
        /// </summary>
        /// <remarks>
        /// Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WorkItemStatus</returns>
        ApiResponse</*WorkItemStatus*/dynamic> WorkItemsGetWorkitemsStatusWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new workitem and queues it for processing.
        /// </summary>
        /// <remarks>
        /// Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>Task of WorkItemStatus</returns>
        System.Threading.Tasks.Task</*WorkItemStatus*/dynamic> WorkItemsCreateWorkItemsAsync (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null);

        /// <summary>
        /// Creates a new workitem and queues it for processing.
        /// </summary>
        /// <remarks>
        /// Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkItemStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse</*WorkItemStatus*/dynamic>> WorkItemsCreateWorkItemsAsyncWithHttpInfo (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null);
        /// <summary>
        /// Cancels a specific workitem.
        /// </summary>
        /// <remarks>
        /// Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WorkItemsDeleteWorkitemsAsync (string id);

        /// <summary>
        /// Cancels a specific workitem.
        /// </summary>
        /// <remarks>
        /// Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WorkItemsDeleteWorkitemsAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the status of a specific workitem.
        /// </summary>
        /// <remarks>
        /// Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WorkItemStatus</returns>
        System.Threading.Tasks.Task</*WorkItemStatus*/dynamic> WorkItemsGetWorkitemsStatusAsync (string id);

        /// <summary>
        /// Gets the status of a specific workitem.
        /// </summary>
        /// <remarks>
        /// Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WorkItemStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse</*WorkItemStatus*/dynamic>> WorkItemsGetWorkitemsStatusAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WorkItemsApi : IWorkItemsApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WorkItemsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WorkItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WorkItemsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new workitem and queues it for processing. Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>WorkItemStatus</returns>
        public /*WorkItemStatus*/dynamic WorkItemsCreateWorkItems (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null)
        {
             ApiResponse</*WorkItemStatus*/dynamic> localVarResponse = WorkItemsCreateWorkItemsWithHttpInfo(exponent, modulus, workitem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new workitem and queues it for processing. Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>ApiResponse of WorkItemStatus</returns>
        public ApiResponse< /*WorkItemStatus*/dynamic > WorkItemsCreateWorkItemsWithHttpInfo (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null)
        {

            var localVarPath = "/da/us-east/v3/workitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (exponent != null) localVarQueryParams.Add("Exponent", Configuration.ApiClient.ParameterToString(exponent)); // query parameter
            if (modulus != null) localVarQueryParams.Add("Modulus", Configuration.ApiClient.ParameterToString(modulus)); // query parameter
            if (workitem != null && workitem.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = workitem; // byte array
            }
            else if (   workitem != null
                     && (   workitem.GetType() == typeof(System.IO.FileStream)
                         || workitem.GetType() == typeof(System.IO.BinaryReader)
                         || workitem.GetType() == typeof(System.IO.BufferedStream)
                   	     || workitem.GetType() == typeof(System.IO.MemoryStream)
                   	     || workitem.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(workitem); // byte array
            }
            else if ( workitem != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workitem);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsCreateWorkItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*WorkItemStatus*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(WorkItemStatus)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkItemStatus), true));
            
        }

        /// <summary>
        /// Creates a new workitem and queues it for processing. Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>Task of WorkItemStatus</returns>
        public async System.Threading.Tasks.Task</*WorkItemStatus*/dynamic> WorkItemsCreateWorkItemsAsync (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null)
        {
             ApiResponse</*WorkItemStatus*/dynamic> localVarResponse = await WorkItemsCreateWorkItemsAsyncWithHttpInfo(exponent, modulus, workitem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new workitem and queues it for processing. Creates a new workitem and queues it for processing.  The new workitem is always placed on the  queue; no further action is necessary.                Limits (engine-specific):                1. Number of downloads (LimitDownloads)  2. Number of uploads (LimitUploads)  3. Total download size (LimitDownloadSize)  4. Total upload size (LimitUploadSize)  5. Processing time (LimitProcessingTime)  6. Total size of uncompressed bits for all referenced appbundles (LimitTotalUncompressedAppsSizePerActivity).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="exponent"> (optional)</param>
        /// <param name="modulus"> (optional)</param>
        /// <param name="workitem"> (optional)</param>
        /// <returns>Task of ApiResponse (WorkItemStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*WorkItemStatus*/dynamic>> WorkItemsCreateWorkItemsAsyncWithHttpInfo (byte[] exponent = null, byte[] modulus = null, WorkItem workitem = null)
        {

            var localVarPath = "/da/us-east/v3/workitems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (exponent != null) localVarQueryParams.Add("Exponent", Configuration.ApiClient.ParameterToString(exponent)); // query parameter
            if (modulus != null) localVarQueryParams.Add("Modulus", Configuration.ApiClient.ParameterToString(modulus)); // query parameter
            if (workitem != null && workitem.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = workitem; // byte array
            }
            else if (   workitem != null
                     && (   workitem.GetType() == typeof(System.IO.FileStream)
                         || workitem.GetType() == typeof(System.IO.BinaryReader)
                         || workitem.GetType() == typeof(System.IO.BufferedStream)
                   	     || workitem.GetType() == typeof(System.IO.MemoryStream)
                   	     || workitem.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(workitem); // byte array
            }
            else if ( workitem != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(workitem);
            }

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsCreateWorkItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*WorkItemStatus*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(WorkItemStatus)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkItemStatus), true));
            
        }

        /// <summary>
        /// Cancels a specific workitem. Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void WorkItemsDeleteWorkitems (string id)
        {
             WorkItemsDeleteWorkitemsWithHttpInfo(id);
        }

        /// <summary>
        /// Cancels a specific workitem. Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WorkItemsDeleteWorkitemsWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkItemsApi->WorkItemsDeleteWorkitems");

            var localVarPath = "/da/us-east/v3/workitems/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsDeleteWorkitems", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancels a specific workitem. Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WorkItemsDeleteWorkitemsAsync (string id)
        {
             await WorkItemsDeleteWorkitemsAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancels a specific workitem. Cancels a specific workitem.  If the workitem is on the queue, it is removed from the queue and not processed.  If the workitem is already being processed, then it may or may not be interrupted and canceled.  If the workitem has already finished processing, then it has no effect on the processing or results.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WorkItemsDeleteWorkitemsAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkItemsApi->WorkItemsDeleteWorkitems");

            var localVarPath = "/da/us-east/v3/workitems/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsDeleteWorkitems", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Gets the status of a specific workitem. Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>WorkItemStatus</returns>
        public /*WorkItemStatus*/dynamic WorkItemsGetWorkitemsStatus (string id)
        {
             ApiResponse</*WorkItemStatus*/dynamic> localVarResponse = WorkItemsGetWorkitemsStatusWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the status of a specific workitem. Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of WorkItemStatus</returns>
        public ApiResponse< /*WorkItemStatus*/dynamic > WorkItemsGetWorkitemsStatusWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkItemsApi->WorkItemsGetWorkitemsStatus");

            var localVarPath = "/da/us-east/v3/workitems/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsGetWorkitemsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*WorkItemStatus*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(WorkItemStatus)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkItemStatus), true));
            
        }

        /// <summary>
        /// Gets the status of a specific workitem. Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of WorkItemStatus</returns>
        public async System.Threading.Tasks.Task</*WorkItemStatus*/dynamic> WorkItemsGetWorkitemsStatusAsync (string id)
        {
             ApiResponse</*WorkItemStatus*/dynamic> localVarResponse = await WorkItemsGetWorkitemsStatusAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the status of a specific workitem. Gets the status of a specific workitem.  Typically used to &#39;poll&#39; for              the completion of a workitem, but see the use of the &#39;onComplete&#39; argument for              an alternative that does not require &#39;polling&#39;.  Workitem status is retained              for a limited period of time after the workitem completes.              Limits:              1. Retention period (LimitWorkItemRetentionPeriod).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (WorkItemStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*WorkItemStatus*/dynamic>> WorkItemsGetWorkitemsStatusAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling WorkItemsApi->WorkItemsGetWorkitemsStatus");

            var localVarPath = "/da/us-east/v3/workitems/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_access_code) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WorkItemsGetWorkitemsStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*WorkItemStatus*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(WorkItemStatus)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(WorkItemStatus), true));
            
        }

    }
}
