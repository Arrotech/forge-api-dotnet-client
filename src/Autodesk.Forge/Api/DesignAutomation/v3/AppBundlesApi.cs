/* 
 * Forge Design Automation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model.DesignAutomation.v3;

namespace Autodesk.Forge.DesignAutomation.v3
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppBundlesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creates a new alias for this app.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic AppBundlesCreateAlias (string id, Alias alias = null, int? saveCondition = null);

        /// <summary>
        /// Creates a new alias for this app.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> AppBundlesCreateAliasWithHttpInfo (string id, Alias alias = null, int? saveCondition = null);
        /// <summary>
        /// Creates a new app.
        /// </summary>
        /// <remarks>
        /// Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>AppBundle</returns>
        /*AppBundle*/dynamic AppBundlesCreateItem (AppBundle item = null);

        /// <summary>
        /// Creates a new app.
        /// </summary>
        /// <remarks>
        /// Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of AppBundle</returns>
        ApiResponse</*AppBundle*/dynamic> AppBundlesCreateItemWithHttpInfo (AppBundle item = null);
        /// <summary>
        /// Creates a new version of the app.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>AppBundle</returns>
        /*AppBundle*/dynamic AppBundlesCreateItemVersion (string id, AppBundle item = null);

        /// <summary>
        /// Creates a new version of the app.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of AppBundle</returns>
        ApiResponse</*AppBundle*/dynamic> AppBundlesCreateItemVersionWithHttpInfo (string id, AppBundle item = null);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns></returns>
        void AppBundlesDeleteAlias (string id, string aliasId);

        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBundlesDeleteAliasWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Deletes the specified app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified app, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns></returns>
        void AppBundlesDeleteItem (string id);

        /// <summary>
        /// Deletes the specified app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified app, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBundlesDeleteItemWithHttpInfo (string id);
        /// <summary>
        /// Deletes the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns></returns>
        void AppBundlesDeleteVersion (int? version, string id);

        /// <summary>
        /// Deletes the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AppBundlesDeleteVersionWithHttpInfo (int? version, string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic AppBundlesGetAlias (string id, string aliasId);

        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> AppBundlesGetAliasWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageAlias</returns>
        /*PageAlias*/dynamic AppBundlesGetAliases (string id, string page = null);

        /// <summary>
        /// Lists all aliases for the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        ApiResponse</*PageAlias*/dynamic> AppBundlesGetAliasesWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Gets the details of the specified app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>AppBundle</returns>
        /*AppBundle*/dynamic AppBundlesGetItem (string id);

        /// <summary>
        /// Gets the details of the specified app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>ApiResponse of AppBundle</returns>
        ApiResponse</*AppBundle*/dynamic> AppBundlesGetItemWithHttpInfo (string id);
        /// <summary>
        /// Gets the details of the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>AppBundle</returns>
        /*AppBundle*/dynamic AppBundlesGetItemVersion (int? version, string id);

        /// <summary>
        /// Gets the details of the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of AppBundle</returns>
        ApiResponse</*AppBundle*/dynamic> AppBundlesGetItemVersionWithHttpInfo (int? version, string id);
        /// <summary>
        /// Lists all available appbundels.
        /// </summary>
        /// <remarks>
        /// Lists all available apps, including apps shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>QueryResultPageString</returns>
        /*QueryResultPageString*/dynamic AppBundlesGetItems (string page = null);

        /// <summary>
        /// Lists all available appbundels.
        /// </summary>
        /// <remarks>
        /// Lists all available apps, including apps shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of QueryResultPageString</returns>
        ApiResponse</*QueryResultPageString*/dynamic> AppBundlesGetItemsWithHttpInfo (string page = null);
        /// <summary>
        /// Lists all versions of the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageInt32</returns>
        /*PageInt32*/dynamic AppBundlesGetVersions (string id, string page = null);

        /// <summary>
        /// Lists all versions of the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageInt32</returns>
        ApiResponse</*PageInt32*/dynamic> AppBundlesGetVersionsWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Alias</returns>
        /*Alias*/dynamic AppBundlesModifyAlias (string id, string aliasId, Alias alias = null);

        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        ApiResponse</*Alias*/dynamic> AppBundlesModifyAliasWithHttpInfo (string id, string aliasId, Alias alias = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creates a new alias for this app.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesCreateAliasAsync (string id, Alias alias = null, int? saveCondition = null);

        /// <summary>
        /// Creates a new alias for this app.
        /// </summary>
        /// <remarks>
        /// Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesCreateAliasAsyncWithHttpInfo (string id, Alias alias = null, int? saveCondition = null);
        /// <summary>
        /// Creates a new app.
        /// </summary>
        /// <remarks>
        /// Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesCreateItemAsync (AppBundle item = null);

        /// <summary>
        /// Creates a new app.
        /// </summary>
        /// <remarks>
        /// Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesCreateItemAsyncWithHttpInfo (AppBundle item = null);
        /// <summary>
        /// Creates a new version of the app.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesCreateItemVersionAsync (string id, AppBundle item = null);

        /// <summary>
        /// Creates a new version of the app.
        /// </summary>
        /// <remarks>
        /// Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesCreateItemVersionAsyncWithHttpInfo (string id, AppBundle item = null);
        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBundlesDeleteAliasAsync (string id, string aliasId);

        /// <summary>
        /// Deletes the alias.
        /// </summary>
        /// <remarks>
        /// Deletes the alias.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteAliasAsyncWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Deletes the specified app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified app, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBundlesDeleteItemAsync (string id);

        /// <summary>
        /// Deletes the specified app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified app, including all versions and aliases.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Deletes the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AppBundlesDeleteVersionAsync (int? version, string id);

        /// <summary>
        /// Deletes the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Deletes the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteVersionAsyncWithHttpInfo (int? version, string id);
        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesGetAliasAsync (string id, string aliasId);

        /// <summary>
        /// Get alias details.
        /// </summary>
        /// <remarks>
        /// Get alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesGetAliasAsyncWithHttpInfo (string id, string aliasId);
        /// <summary>
        /// Lists all aliases for the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        System.Threading.Tasks.Task</*PageAlias*/dynamic> AppBundlesGetAliasesAsync (string id, string page = null);

        /// <summary>
        /// Lists all aliases for the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all aliases for the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PageAlias*/dynamic>> AppBundlesGetAliasesAsyncWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Gets the details of the specified app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesGetItemAsync (string id);

        /// <summary>
        /// Gets the details of the specified app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesGetItemAsyncWithHttpInfo (string id);
        /// <summary>
        /// Gets the details of the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of AppBundle</returns>
        System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesGetItemVersionAsync (int? version, string id);

        /// <summary>
        /// Gets the details of the specified version of the app.
        /// </summary>
        /// <remarks>
        /// Gets the details of the specified version of the app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesGetItemVersionAsyncWithHttpInfo (int? version, string id);
        /// <summary>
        /// Lists all available appbundels.
        /// </summary>
        /// <remarks>
        /// Lists all available apps, including apps shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        System.Threading.Tasks.Task</*QueryResultPageString*/dynamic> AppBundlesGetItemsAsync (string page = null);

        /// <summary>
        /// Lists all available appbundels.
        /// </summary>
        /// <remarks>
        /// Lists all available apps, including apps shared with this Forge app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultPageString)</returns>
        System.Threading.Tasks.Task<ApiResponse</*QueryResultPageString*/dynamic>> AppBundlesGetItemsAsyncWithHttpInfo (string page = null);
        /// <summary>
        /// Lists all versions of the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        System.Threading.Tasks.Task</*PageInt32*/dynamic> AppBundlesGetVersionsAsync (string id, string page = null);

        /// <summary>
        /// Lists all versions of the specified app.
        /// </summary>
        /// <remarks>
        /// Lists all versions of the specified app.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageInt32)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PageInt32*/dynamic>> AppBundlesGetVersionsAsyncWithHttpInfo (string id, string page = null);
        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of Alias</returns>
        System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesModifyAliasAsync (string id, string aliasId, Alias alias = null);

        /// <summary>
        /// Modify alias details.
        /// </summary>
        /// <remarks>
        /// Modify alias details.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesModifyAliasAsyncWithHttpInfo (string id, string aliasId, Alias alias = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppBundlesApi : IAppBundlesApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBundlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppBundlesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppBundlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppBundlesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creates a new alias for this app. Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic AppBundlesCreateAlias (string id, Alias alias = null, int? saveCondition = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = AppBundlesCreateAliasWithHttpInfo(id, alias, saveCondition);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new alias for this app. Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > AppBundlesCreateAliasWithHttpInfo (string id, Alias alias = null, int? saveCondition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesCreateAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveCondition != null) localVarQueryParams.Add("saveCondition", Configuration.ApiClient.ParameterToString(saveCondition)); // query parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Creates a new alias for this app. Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesCreateAliasAsync (string id, Alias alias = null, int? saveCondition = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await AppBundlesCreateAliasAsyncWithHttpInfo(id, alias, saveCondition);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new alias for this app. Creates a new alias for this app. Limit: 1. Number of aliases (LimitAliases).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="alias"> (optional)</param>
        /// <param name="saveCondition"> (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesCreateAliasAsyncWithHttpInfo (string id, Alias alias = null, int? saveCondition = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesCreateAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (saveCondition != null) localVarQueryParams.Add("saveCondition", Configuration.ApiClient.ParameterToString(saveCondition)); // query parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Creates a new app. Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>AppBundle</returns>
        public /*AppBundle*/dynamic AppBundlesCreateItem (AppBundle item = null)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = AppBundlesCreateItemWithHttpInfo(item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new app. Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of AppBundle</returns>
        public ApiResponse< /*AppBundle*/dynamic > AppBundlesCreateItemWithHttpInfo (AppBundle item = null)
        {

            var localVarPath = "/da/us-east/v3/appbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Creates a new app. Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesCreateItemAsync (AppBundle item = null)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = await AppBundlesCreateItemAsyncWithHttpInfo(item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new app. Creates a new appbundle.              Limits: (varies by engine)              1. Number of apps that can be created.              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesCreateItemAsyncWithHttpInfo (AppBundle item = null)
        {

            var localVarPath = "/da/us-east/v3/appbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Creates a new version of the app. Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>AppBundle</returns>
        public /*AppBundle*/dynamic AppBundlesCreateItemVersion (string id, AppBundle item = null)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = AppBundlesCreateItemVersionWithHttpInfo(id, item);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new version of the app. Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>ApiResponse of AppBundle</returns>
        public ApiResponse< /*AppBundle*/dynamic > AppBundlesCreateItemVersionWithHttpInfo (string id, AppBundle item = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesCreateItemVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Creates a new version of the app. Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesCreateItemVersionAsync (string id, AppBundle item = null)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = await AppBundlesCreateItemVersionAsyncWithHttpInfo(id, item);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creates a new version of the app. Creates a new version of the app.              Limit:              1. Number of versions (LimitVersions).              2. Size of app.              &lt;para&gt;              This method creates new App returned in response value.              POST upload is required to limit upload size. The endpoint url and all form fields are retrieved in App.UploadParameters.              &lt;/para&gt;&lt;para&gt;              App.UploadParameters example:              {              \&quot;EndpointURL\&quot;: \&quot;https://bucketname.s3.amazonaws.com\&quot;,               \&quot;FormData\&quot;: {                 \&quot;key\&quot;: apps/myApp,                 \&quot;content-type\&quot;: \&quot;application/octet-stream\&quot;,                 \&quot;policy\&quot;: \&quot;eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)\&quot;,                 \&quot;x-amz-signature\&quot;: \&quot;800e52d73579387757e1c1cd88762...(trimmed)\&quot;,                 \&quot;x-amz-credential\&quot;: \&quot;AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/\&quot;,                 \&quot;x-amz-algorithm\&quot;: \&quot;AWS4-HMAC-SHA256\&quot;,                 \&quot;x-amz-date\&quot;: \&quot;20180621T091656Z\&quot;,               }              }              Use FormData fields to create &lt;b&gt;multipart/form-data&lt;/b&gt; request. Add &lt;b&gt;file&lt;/b&gt; at the end.              Upload request may look like this (using curl):              curl https://bucketname.s3.amazonaws.com/              -F key &#x3D; apps/myApp/myfile.zip              -F content-type &#x3D; application/octet-stream              -F policy &#x3D; eyJleHBpcmF0aW9uIjoiMjAxOC0wNi0yMVQxMzo...(trimmed)              -F x-amz-signature &#x3D; 800e52d73579387757e1c1cd88762...(trimmed)              -F x-amz-credential &#x3D; AKIAIOSFODNN7EXAMPLE/20180621/us-west-2/s3/aws4_request/              -F x-amz-algorithm &#x3D; AWS4-HMAC-SHA256              -F x-amz-date &#x3D; 20180621T091656Z              -F file&#x3D;@E:\\myfile.zip              &lt;/para&gt;&lt;para&gt;              * Use exactly &lt;b&gt;file&lt;/b&gt; field name for the file.              * &lt;b&gt;file&lt;/b&gt; fields must go at the end, all the fields after &lt;b&gt;file&lt;/b&gt; will be ignored.              &lt;/para&gt;
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="item"> (optional)</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesCreateItemVersionAsyncWithHttpInfo (string id, AppBundle item = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesCreateItemVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (item != null && item.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = item; // byte array
            }
            else if (   item != null
                     && (   item.GetType() == typeof(System.IO.FileStream)
                         || item.GetType() == typeof(System.IO.BinaryReader)
                         || item.GetType() == typeof(System.IO.BufferedStream)
                   	     || item.GetType() == typeof(System.IO.MemoryStream)
                   	     || item.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(item); // byte array
            }
            else if ( item != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesCreateItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns></returns>
        public void AppBundlesDeleteAlias (string id, string aliasId)
        {
             AppBundlesDeleteAliasWithHttpInfo(id, aliasId);
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppBundlesDeleteAliasWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesDeleteAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBundlesDeleteAliasAsync (string id, string aliasId)
        {
             await AppBundlesDeleteAliasAsyncWithHttpInfo(id, aliasId);

        }

        /// <summary>
        /// Deletes the alias. Deletes the alias.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias to delete.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteAliasAsyncWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesDeleteAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified app. Deletes the specified app, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns></returns>
        public void AppBundlesDeleteItem (string id)
        {
             AppBundlesDeleteItemWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes the specified app. Deletes the specified app, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppBundlesDeleteItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteItem");

            var localVarPath = "/da/us-east/v3/appbundles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified app. Deletes the specified app, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBundlesDeleteItemAsync (string id)
        {
             await AppBundlesDeleteItemAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Deletes the specified app. Deletes the specified app, including all versions and aliases.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteItem");

            var localVarPath = "/da/us-east/v3/appbundles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteItem", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified version of the app. Deletes the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns></returns>
        public void AppBundlesDeleteVersion (int? version, string id)
        {
             AppBundlesDeleteVersionWithHttpInfo(version, id);
        }

        /// <summary>
        /// Deletes the specified version of the app. Deletes the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AppBundlesDeleteVersionWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AppBundlesApi->AppBundlesDeleteVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Deletes the specified version of the app. Deletes the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AppBundlesDeleteVersionAsync (int? version, string id)
        {
             await AppBundlesDeleteVersionAsyncWithHttpInfo(version, id);

        }

        /// <summary>
        /// Deletes the specified version of the app. Deletes the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to delete (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AppBundlesDeleteVersionAsyncWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AppBundlesApi->AppBundlesDeleteVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesDeleteVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesDeleteVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic AppBundlesGetAlias (string id, string aliasId)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = AppBundlesGetAliasWithHttpInfo(id, aliasId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > AppBundlesGetAliasWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesGetAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesGetAliasAsync (string id, string aliasId)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await AppBundlesGetAliasAsyncWithHttpInfo(id, aliasId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get alias details. Get alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesGetAliasAsyncWithHttpInfo (string id, string aliasId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesGetAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Lists all aliases for the specified app. Lists all aliases for the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageAlias</returns>
        public /*PageAlias*/dynamic AppBundlesGetAliases (string id, string page = null)
        {
             ApiResponse</*PageAlias*/dynamic> localVarResponse = AppBundlesGetAliasesWithHttpInfo(id, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all aliases for the specified app. Lists all aliases for the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageAlias</returns>
        public ApiResponse< /*PageAlias*/dynamic > AppBundlesGetAliasesWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetAliases");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageAlias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageAlias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias), true));
            
        }

        /// <summary>
        /// Lists all aliases for the specified app. Lists all aliases for the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageAlias</returns>
        public async System.Threading.Tasks.Task</*PageAlias*/dynamic> AppBundlesGetAliasesAsync (string id, string page = null)
        {
             ApiResponse</*PageAlias*/dynamic> localVarResponse = await AppBundlesGetAliasesAsyncWithHttpInfo(id, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all aliases for the specified app. Lists all aliases for the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of activity (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageAlias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PageAlias*/dynamic>> AppBundlesGetAliasesAsyncWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetAliases");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetAliases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageAlias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageAlias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageAlias), true));
            
        }

        /// <summary>
        /// Gets the details of the specified app. Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>AppBundle</returns>
        public /*AppBundle*/dynamic AppBundlesGetItem (string id)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = AppBundlesGetItemWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of the specified app. Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>ApiResponse of AppBundle</returns>
        public ApiResponse< /*AppBundle*/dynamic > AppBundlesGetItemWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetItem");

            var localVarPath = "/da/us-east/v3/appbundles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Gets the details of the specified app. Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesGetItemAsync (string id)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = await AppBundlesGetItemAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of the specified app. Gets the details of the specified appbundle. Note that the {id} parameter must be a QualifiedId (owner.name+label).
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Full qualified id of the appbundle (owner.name+label).</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesGetItemAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetItem");

            var localVarPath = "/da/us-east/v3/appbundles/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Gets the details of the specified version of the app. Gets the details of the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>AppBundle</returns>
        public /*AppBundle*/dynamic AppBundlesGetItemVersion (int? version, string id)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = AppBundlesGetItemVersionWithHttpInfo(version, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the details of the specified version of the app. Gets the details of the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>ApiResponse of AppBundle</returns>
        public ApiResponse< /*AppBundle*/dynamic > AppBundlesGetItemVersionWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AppBundlesApi->AppBundlesGetItemVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetItemVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Gets the details of the specified version of the app. Gets the details of the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of AppBundle</returns>
        public async System.Threading.Tasks.Task</*AppBundle*/dynamic> AppBundlesGetItemVersionAsync (int? version, string id)
        {
             ApiResponse</*AppBundle*/dynamic> localVarResponse = await AppBundlesGetItemVersionAsyncWithHttpInfo(version, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets the details of the specified version of the app. Gets the details of the specified version of the app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="version">Version to retrieve (as integer).</param>
        /// <param name="id">Name of app (unqualified).</param>
        /// <returns>Task of ApiResponse (AppBundle)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*AppBundle*/dynamic>> AppBundlesGetItemVersionAsyncWithHttpInfo (int? version, string id)
        {
            // verify the required parameter 'version' is set
            if (version == null)
                throw new ApiException(400, "Missing required parameter 'version' when calling AppBundlesApi->AppBundlesGetItemVersion");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetItemVersion");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions/{version}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (version != null) localVarPathParams.Add("version", Configuration.ApiClient.ParameterToString(version)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItemVersion", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*AppBundle*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(AppBundle)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(AppBundle), true));
            
        }

        /// <summary>
        /// Lists all available appbundels. Lists all available apps, including apps shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>QueryResultPageString</returns>
        public /*QueryResultPageString*/dynamic AppBundlesGetItems (string page = null)
        {
             ApiResponse</*QueryResultPageString*/dynamic> localVarResponse = AppBundlesGetItemsWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all available appbundels. Lists all available apps, including apps shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of QueryResultPageString</returns>
        public ApiResponse< /*QueryResultPageString*/dynamic > AppBundlesGetItemsWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/appbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*QueryResultPageString*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(QueryResultPageString)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageString), true));
            
        }

        /// <summary>
        /// Lists all available appbundels. Lists all available apps, including apps shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of QueryResultPageString</returns>
        public async System.Threading.Tasks.Task</*QueryResultPageString*/dynamic> AppBundlesGetItemsAsync (string page = null)
        {
             ApiResponse</*QueryResultPageString*/dynamic> localVarResponse = await AppBundlesGetItemsAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all available appbundels. Lists all available apps, including apps shared with this Forge app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (QueryResultPageString)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*QueryResultPageString*/dynamic>> AppBundlesGetItemsAsyncWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/appbundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*QueryResultPageString*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(QueryResultPageString)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageString), true));
            
        }

        /// <summary>
        /// Lists all versions of the specified app. Lists all versions of the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>PageInt32</returns>
        public /*PageInt32*/dynamic AppBundlesGetVersions (string id, string page = null)
        {
             ApiResponse</*PageInt32*/dynamic> localVarResponse = AppBundlesGetVersionsWithHttpInfo(id, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all versions of the specified app. Lists all versions of the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>ApiResponse of PageInt32</returns>
        public ApiResponse< /*PageInt32*/dynamic > AppBundlesGetVersionsWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetVersions");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageInt32*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageInt32)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInt32), true));
            
        }

        /// <summary>
        /// Lists all versions of the specified app. Lists all versions of the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of PageInt32</returns>
        public async System.Threading.Tasks.Task</*PageInt32*/dynamic> AppBundlesGetVersionsAsync (string id, string page = null)
        {
             ApiResponse</*PageInt32*/dynamic> localVarResponse = await AppBundlesGetVersionsAsyncWithHttpInfo(id, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all versions of the specified app. Lists all versions of the specified app.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="page">Access an additional &#39;page&#39; of data when necessary, based on the &#39;paginationToken&#39; returned from a previous invocation. (optional)</param>
        /// <returns>Task of ApiResponse (PageInt32)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PageInt32*/dynamic>> AppBundlesGetVersionsAsyncWithHttpInfo (string id, string page = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesGetVersions");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/versions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesGetVersions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageInt32*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageInt32)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageInt32), true));
            
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Alias</returns>
        public /*Alias*/dynamic AppBundlesModifyAlias (string id, string aliasId, Alias alias = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = AppBundlesModifyAliasWithHttpInfo(id, aliasId, alias);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>ApiResponse of Alias</returns>
        public ApiResponse< /*Alias*/dynamic > AppBundlesModifyAliasWithHttpInfo (string id, string aliasId, Alias alias = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesModifyAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesModifyAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesModifyAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of Alias</returns>
        public async System.Threading.Tasks.Task</*Alias*/dynamic> AppBundlesModifyAliasAsync (string id, string aliasId, Alias alias = null)
        {
             ApiResponse</*Alias*/dynamic> localVarResponse = await AppBundlesModifyAliasAsyncWithHttpInfo(id, aliasId, alias);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modify alias details. Modify alias details.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Name of app (unqualified).</param>
        /// <param name="aliasId">Name of alias.</param>
        /// <param name="alias">Alias details to be modified. (optional)</param>
        /// <returns>Task of ApiResponse (Alias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*Alias*/dynamic>> AppBundlesModifyAliasAsyncWithHttpInfo (string id, string aliasId, Alias alias = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AppBundlesApi->AppBundlesModifyAlias");
            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
                throw new ApiException(400, "Missing required parameter 'aliasId' when calling AppBundlesApi->AppBundlesModifyAlias");

            var localVarPath = "/da/us-east/v3/appbundles/{id}/aliases/{aliasId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (aliasId != null) localVarPathParams.Add("aliasId", Configuration.ApiClient.ParameterToString(aliasId)); // path parameter
            if (alias != null && alias.GetType() == typeof(byte[])) // http body (model) parameter
            {
                localVarPostBody = alias; // byte array
            }
            else if (   alias != null
                     && (   alias.GetType() == typeof(System.IO.FileStream)
                         || alias.GetType() == typeof(System.IO.BinaryReader)
                         || alias.GetType() == typeof(System.IO.BufferedStream)
                   	     || alias.GetType() == typeof(System.IO.MemoryStream)
                   	     || alias.GetType() == typeof(System.IO.StreamReader)
                   	    )
                    )
            {
                localVarPostBody =Configuration.ApiClient.toByteArray(alias); // byte array
            }
            else if ( alias != null )
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alias);
            }

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppBundlesModifyAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*Alias*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(Alias)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alias), true));
            
        }

    }
}
