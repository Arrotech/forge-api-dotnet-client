/* 
 * Forge Design Automation
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Newtonsoft.Json.Linq;
using Autodesk.Forge.Client;
using Autodesk.Forge.Model.DesignAutomation.v3;

namespace Autodesk.Forge.DesignAutomation.v3
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISharesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app.
        /// </summary>
        /// <remarks>
        /// Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>PageShares</returns>
        /*PageShares*/dynamic SharesSharesGet (string page = null);

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app.
        /// </summary>
        /// <remarks>
        /// Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>ApiResponse of PageShares</returns>
        ApiResponse</*PageShares*/dynamic> SharesSharesGetWithHttpInfo (string page = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app.
        /// </summary>
        /// <remarks>
        /// Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>Task of PageShares</returns>
        System.Threading.Tasks.Task</*PageShares*/dynamic> SharesSharesGetAsync (string page = null);

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app.
        /// </summary>
        /// <remarks>
        /// Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </remarks>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>Task of ApiResponse (PageShares)</returns>
        System.Threading.Tasks.Task<ApiResponse</*PageShares*/dynamic>> SharesSharesGetAsyncWithHttpInfo (string page = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    [Obsolete("Please use NuGet package Autodesk.Forge.DesignAutomation instead")]
    public partial class SharesApi : ISharesApi
    {
        private Autodesk.Forge.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SharesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SharesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SharesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SharesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Autodesk.Forge.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Autodesk.Forge.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app. Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>PageShares</returns>
        public /*PageShares*/dynamic SharesSharesGet (string page = null)
        {
             ApiResponse</*PageShares*/dynamic> localVarResponse = SharesSharesGetWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app. Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>ApiResponse of PageShares</returns>
        public ApiResponse< /*PageShares*/dynamic > SharesSharesGetWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharesSharesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageShares*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageShares)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageShares), true));
            
        }

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app. Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>Task of PageShares</returns>
        public async System.Threading.Tasks.Task</*PageShares*/dynamic> SharesSharesGetAsync (string page = null)
        {
             ApiResponse</*PageShares*/dynamic> localVarResponse = await SharesSharesGetAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets all shares (appbundles and activities) shared by this Forge app. Gets all shares (appbundles and activities) shared by this Forge app (shared to other  Forge apps for them to use).                Sharing of appbundles and activities is controlled via the use of &#39;aliases&#39;.
        /// </summary>
        /// <exception cref="Autodesk.Forge.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Used to get subsequent &#39;pages&#39; of data. (optional)</param>
        /// <returns>Task of ApiResponse (PageShares)</returns>
        public async System.Threading.Tasks.Task<ApiResponse</*PageShares*/dynamic>> SharesSharesGetAsyncWithHttpInfo (string page = null)
        {

            var localVarPath = "/da/us-east/v3/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter

            // authentication (oauth2_application) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SharesSharesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse</*PageShares*/dynamic>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                /*(PageShares)*/ Configuration.ApiClient.Deserialize(localVarResponse, typeof(PageShares), true));
            
        }

    }
}
